
ninos sakurso.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000ad2  00000b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800118  00800118  00000b7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a62  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074c  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000492  00000000  00000000  00001e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b3  00000000  00000000  00002829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  9e:	0c 94 67 05 	jmp	0xace	; 0xace <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:
	TCCR0B |=(1<<CS01);
}
void StopTimer0(void)
{
	TCCR0B &=~(1<<CS01);
	TIMSK0 &=~(1<<OCIE0A);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 6a       	ori	r24, 0xAD	; 173
  b8:	80 83       	st	Z, r24
  ba:	eb e7       	ldi	r30, 0x7B	; 123
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <SetADCChannel>:
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <StartADC>:
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <InitPort>:
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	8c 6f       	ori	r24, 0xFC	; 252
  e6:	8a b9       	out	0x0a, r24	; 10
  e8:	08 95       	ret

000000ea <InitTimer0>:
  ea:	16 bc       	out	0x26, r1	; 38
  ec:	83 e6       	ldi	r24, 0x63	; 99
  ee:	87 bd       	out	0x27, r24	; 39
  f0:	84 b5       	in	r24, 0x24	; 36
  f2:	82 64       	ori	r24, 0x42	; 66
  f4:	84 bd       	out	0x24, r24	; 36
  f6:	08 95       	ret

000000f8 <StartTimer0>:
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	85 bd       	out	0x25, r24	; 37
  fe:	08 95       	ret

00000100 <pwmfunc>:
}

void pwmfunc(int dc)
{
	OCR2B = dc;
 100:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	TCCR2A |= (1<<COM2B1) | (1<<WGM21) | (1<<WGM20);
 104:	e0 eb       	ldi	r30, 0xB0	; 176
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	83 62       	ori	r24, 0x23	; 35
 10c:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21);
 10e:	e1 eb       	ldi	r30, 0xB1	; 177
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <__vector_21>:
}

ISR(ADC_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
	//clear timer compare match flag
	TIFR0=(1<<OCF0A);
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	85 bb       	out	0x15, r24	; 21
	//toggle pin PD2 to track the end of ADC conversion
	PIND = (1<<PIND2);
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	89 b9       	out	0x09, r24	; 9
	new_ADC_value = ADCH;
 12e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 132:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <new_ADC_value>
}
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <PID_foo>:

float PID_foo(float *p)
{
 142:	4f 92       	push	r4
 144:	5f 92       	push	r5
 146:	6f 92       	push	r6
 148:	7f 92       	push	r7
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	28 97       	sbiw	r28, 0x08	; 8
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	fc 01       	movw	r30, r24
	float Kp = p[0];
 170:	80 80       	ld	r8, Z
 172:	91 80       	ldd	r9, Z+1	; 0x01
 174:	a2 80       	ldd	r10, Z+2	; 0x02
 176:	b3 80       	ldd	r11, Z+3	; 0x03
	float Ki = p[1];
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	95 81       	ldd	r25, Z+5	; 0x05
 17c:	a6 81       	ldd	r26, Z+6	; 0x06
 17e:	b7 81       	ldd	r27, Z+7	; 0x07
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	9a 83       	std	Y+2, r25	; 0x02
 184:	ab 83       	std	Y+3, r26	; 0x03
 186:	bc 83       	std	Y+4, r27	; 0x04
	float Kd = p[2];
 188:	40 84       	ldd	r4, Z+8	; 0x08
 18a:	51 84       	ldd	r5, Z+9	; 0x09
 18c:	62 84       	ldd	r6, Z+10	; 0x0a
 18e:	73 84       	ldd	r7, Z+11	; 0x0b
	float Err_Value;
	float P_Term;
	float I_Term;
	float D_Term;
	
	Err_Value = (Set_Point - new_ADC_value);
 190:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <new_ADC_value>
 194:	6f e7       	ldi	r22, 0x7F	; 127
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	68 1b       	sub	r22, r24
 19a:	71 09       	sbc	r23, r1
 19c:	07 2e       	mov	r0, r23
 19e:	00 0c       	add	r0, r0
 1a0:	88 0b       	sbc	r24, r24
 1a2:	99 0b       	sbc	r25, r25
 1a4:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 1a8:	6b 01       	movw	r12, r22
 1aa:	7c 01       	movw	r14, r24
	P_Term = Kp * Err_Value;
 1ac:	9b 01       	movw	r18, r22
 1ae:	ac 01       	movw	r20, r24
 1b0:	c5 01       	movw	r24, r10
 1b2:	b4 01       	movw	r22, r8
 1b4:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 1b8:	6d 83       	std	Y+5, r22	; 0x05
 1ba:	7e 83       	std	Y+6, r23	; 0x06
 1bc:	8f 83       	std	Y+7, r24	; 0x07
 1be:	98 87       	std	Y+8, r25	; 0x08
	i_Temp += Err_Value;
 1c0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 1c4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 1c8:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <__data_end+0x2>
 1cc:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <__data_end+0x3>
 1d0:	c7 01       	movw	r24, r14
 1d2:	b6 01       	movw	r22, r12
 1d4:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 1d8:	4b 01       	movw	r8, r22
 1da:	5c 01       	movw	r10, r24
 1dc:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <__data_end>
 1e0:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <__data_end+0x1>
 1e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x2>
 1e8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x3>
	
	if (i_Temp > iMax)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	48 ec       	ldi	r20, 0xC8	; 200
 1f2:	52 e4       	ldi	r21, 0x42	; 66
 1f4:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 1f8:	18 16       	cp	r1, r24
 1fa:	6c f4       	brge	.+26     	; 0x216 <PID_foo+0xd4>
	{i_Temp = iMax;}
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	a8 ec       	ldi	r26, 0xC8	; 200
 202:	b2 e4       	ldi	r27, 0x42	; 66
 204:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 208:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 20c:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 210:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
 214:	16 c0       	rjmp	.+44     	; 0x242 <PID_foo+0x100>
	else if (i_Temp < iMin)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	48 ec       	ldi	r20, 0xC8	; 200
 21c:	52 ec       	ldi	r21, 0xC2	; 194
 21e:	c5 01       	movw	r24, r10
 220:	b4 01       	movw	r22, r8
 222:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	64 f4       	brge	.+24     	; 0x242 <PID_foo+0x100>
	{i_Temp = iMin;}
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a8 ec       	ldi	r26, 0xC8	; 200
 230:	b2 ec       	ldi	r27, 0xC2	; 194
 232:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 236:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 23a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <__data_end+0x2>
 23e:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <__data_end+0x3>
	
	I_Term = Ki * i_Temp;
 242:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 246:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
 24a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <__data_end+0x2>
 24e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <__data_end+0x3>
 252:	69 81       	ldd	r22, Y+1	; 0x01
 254:	7a 81       	ldd	r23, Y+2	; 0x02
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 25e:	69 83       	std	Y+1, r22	; 0x01
 260:	7a 83       	std	Y+2, r23	; 0x02
 262:	8b 83       	std	Y+3, r24	; 0x03
 264:	9c 83       	std	Y+4, r25	; 0x04
	
	D_Term = Kd * (d_Temp - Err_Value);
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <d_Temp>
 26e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <d_Temp+0x1>
 272:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <d_Temp+0x2>
 276:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <d_Temp+0x3>
 27a:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	c3 01       	movw	r24, r6
 284:	b2 01       	movw	r22, r4
 286:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 28a:	4b 01       	movw	r8, r22
 28c:	5c 01       	movw	r10, r24
	d_Temp = Err_Value;
 28e:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <d_Temp>
 292:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <d_Temp+0x1>
 296:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <d_Temp+0x2>
 29a:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <d_Temp+0x3>
	
	return (P_Term + I_Term + D_Term);	
 29e:	29 81       	ldd	r18, Y+1	; 0x01
 2a0:	3a 81       	ldd	r19, Y+2	; 0x02
 2a2:	4b 81       	ldd	r20, Y+3	; 0x03
 2a4:	5c 81       	ldd	r21, Y+4	; 0x04
 2a6:	6d 81       	ldd	r22, Y+5	; 0x05
 2a8:	7e 81       	ldd	r23, Y+6	; 0x06
 2aa:	8f 81       	ldd	r24, Y+7	; 0x07
 2ac:	98 85       	ldd	r25, Y+8	; 0x08
 2ae:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	c5 01       	movw	r24, r10
 2b8:	b4 01       	movw	r22, r8
 2ba:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
}
 2be:	28 96       	adiw	r28, 0x08	; 8
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	7f 90       	pop	r7
 2e0:	6f 90       	pop	r6
 2e2:	5f 90       	pop	r5
 2e4:	4f 90       	pop	r4
 2e6:	08 95       	ret

000002e8 <main>:


int main()
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	68 97       	sbiw	r28, 0x18	; 24
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
	InitPort();
 2fc:	0e 94 71 00 	call	0xe2	; 0xe2 <InitPort>

	InitTimer0();
 300:	0e 94 75 00 	call	0xea	; 0xea <InitTimer0>

	sei();
 304:	78 94       	sei
	
	while(1)
	{
		InitADC();
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>
	
		SetADCChannel(0);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 63 00 	call	0xc6	; 0xc6 <SetADCChannel>

		StartTimer0();
 310:	0e 94 7c 00 	call	0xf8	; 0xf8 <StartTimer0>
		//start conversion
		StartADC();
 314:	0e 94 6b 00 	call	0xd6	; 0xd6 <StartADC>
		
		float coef[3] = {0, 0, 0};//{0, 0, 0};
 318:	1d 86       	std	Y+13, r1	; 0x0d
 31a:	1e 86       	std	Y+14, r1	; 0x0e
 31c:	1f 86       	std	Y+15, r1	; 0x0f
 31e:	18 8a       	std	Y+16, r1	; 0x10
 320:	19 8a       	std	Y+17, r1	; 0x11
 322:	1a 8a       	std	Y+18, r1	; 0x12
 324:	1b 8a       	std	Y+19, r1	; 0x13
 326:	1c 8a       	std	Y+20, r1	; 0x14
 328:	1d 8a       	std	Y+21, r1	; 0x15
 32a:	1e 8a       	std	Y+22, r1	; 0x16
 32c:	1f 8a       	std	Y+23, r1	; 0x17
 32e:	18 8e       	std	Y+24, r1	; 0x18
		float dcoef[3] = {1, 0.5, 0.5};
 330:	8c e0       	ldi	r24, 0x0C	; 12
 332:	ec e0       	ldi	r30, 0x0C	; 12
 334:	f1 e0       	ldi	r31, 0x01	; 1
 336:	de 01       	movw	r26, r28
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	01 90       	ld	r0, Z+
 33c:	0d 92       	st	X+, r0
 33e:	8a 95       	dec	r24
 340:	e1 f7       	brne	.-8      	; 0x33a <main+0x52>
		//float threshold = 0.001;
		
		float best_error = PID_foo(coef);	
 342:	ce 01       	movw	r24, r28
 344:	0d 96       	adiw	r24, 0x0d	; 13
 346:	0e 94 a1 00 	call	0x142	; 0x142 <PID_foo>
 34a:	76 2e       	mov	r7, r22
 34c:	67 2e       	mov	r6, r23
 34e:	58 2e       	mov	r5, r24
 350:	49 2e       	mov	r4, r25
		float error = 0;
		
		//while((dcoef[0] + dcoef[1] + dcoef[2]) > threshold)
		while(1)
		{
			for(int i =0; i < 3; i++)
 352:	00 e0       	ldi	r16, 0x00	; 0
 354:	10 e0       	ldi	r17, 0x00	; 0
 356:	c8 c0       	rjmp	.+400    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
			{
				coef[i] += dcoef[i];
 358:	58 01       	movw	r10, r16
 35a:	aa 0c       	add	r10, r10
 35c:	bb 1c       	adc	r11, r11
 35e:	aa 0c       	add	r10, r10
 360:	bb 1c       	adc	r11, r11
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	8c 0f       	add	r24, r28
 368:	9d 1f       	adc	r25, r29
 36a:	a8 0e       	add	r10, r24
 36c:	b9 1e       	adc	r11, r25
 36e:	f5 01       	movw	r30, r10
 370:	c0 80       	ld	r12, Z
 372:	d1 80       	ldd	r13, Z+1	; 0x01
 374:	e2 80       	ldd	r14, Z+2	; 0x02
 376:	f3 80       	ldd	r15, Z+3	; 0x03
 378:	a7 01       	movw	r20, r14
 37a:	96 01       	movw	r18, r12
 37c:	64 85       	ldd	r22, Z+12	; 0x0c
 37e:	75 85       	ldd	r23, Z+13	; 0x0d
 380:	86 85       	ldd	r24, Z+14	; 0x0e
 382:	97 85       	ldd	r25, Z+15	; 0x0f
 384:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 388:	f5 01       	movw	r30, r10
 38a:	64 87       	std	Z+12, r22	; 0x0c
 38c:	75 87       	std	Z+13, r23	; 0x0d
 38e:	86 87       	std	Z+14, r24	; 0x0e
 390:	97 87       	std	Z+15, r25	; 0x0f
				error = PID_foo(coef);
 392:	ce 01       	movw	r24, r28
 394:	0d 96       	adiw	r24, 0x0d	; 13
 396:	0e 94 a1 00 	call	0x142	; 0x142 <PID_foo>
 39a:	a6 2e       	mov	r10, r22
 39c:	b7 2e       	mov	r11, r23
 39e:	98 2e       	mov	r9, r24
 3a0:	89 2e       	mov	r8, r25
				if(error < best_error)
 3a2:	26 2f       	mov	r18, r22
 3a4:	37 2f       	mov	r19, r23
 3a6:	48 2f       	mov	r20, r24
 3a8:	59 2f       	mov	r21, r25
 3aa:	67 2d       	mov	r22, r7
 3ac:	76 2d       	mov	r23, r6
 3ae:	85 2d       	mov	r24, r5
 3b0:	94 2d       	mov	r25, r4
 3b2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 3b6:	18 16       	cp	r1, r24
 3b8:	ec f4       	brge	.+58     	; 0x3f4 <main+0x10c>
				{
					best_error = error;
					dcoef[i] *= 1.1; //1.1
 3ba:	38 01       	movw	r6, r16
 3bc:	66 0c       	add	r6, r6
 3be:	77 1c       	adc	r7, r7
 3c0:	66 0c       	add	r6, r6
 3c2:	77 1c       	adc	r7, r7
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	8c 0f       	add	r24, r28
 3ca:	9d 1f       	adc	r25, r29
 3cc:	68 0e       	add	r6, r24
 3ce:	79 1e       	adc	r7, r25
 3d0:	2d ec       	ldi	r18, 0xCD	; 205
 3d2:	3c ec       	ldi	r19, 0xCC	; 204
 3d4:	4c e8       	ldi	r20, 0x8C	; 140
 3d6:	5f e3       	ldi	r21, 0x3F	; 63
 3d8:	c7 01       	movw	r24, r14
 3da:	b6 01       	movw	r22, r12
 3dc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 3e0:	f3 01       	movw	r30, r6
 3e2:	60 83       	st	Z, r22
 3e4:	71 83       	std	Z+1, r23	; 0x01
 3e6:	82 83       	std	Z+2, r24	; 0x02
 3e8:	93 83       	std	Z+3, r25	; 0x03
			{
				coef[i] += dcoef[i];
				error = PID_foo(coef);
				if(error < best_error)
				{
					best_error = error;
 3ea:	7a 2c       	mov	r7, r10
 3ec:	6b 2c       	mov	r6, r11
 3ee:	59 2c       	mov	r5, r9
 3f0:	48 2c       	mov	r4, r8
 3f2:	78 c0       	rjmp	.+240    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
					dcoef[i] *= 1.1; //1.1
				}
				else
				{
					coef[i] -= 0.1*dcoef[i];
 3f4:	2d ec       	ldi	r18, 0xCD	; 205
 3f6:	3c ec       	ldi	r19, 0xCC	; 204
 3f8:	4c ec       	ldi	r20, 0xCC	; 204
 3fa:	5d e3       	ldi	r21, 0x3D	; 61
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 404:	9b 01       	movw	r18, r22
 406:	ac 01       	movw	r20, r24
 408:	58 01       	movw	r10, r16
 40a:	aa 0c       	add	r10, r10
 40c:	bb 1c       	adc	r11, r11
 40e:	aa 0c       	add	r10, r10
 410:	bb 1c       	adc	r11, r11
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	8c 0f       	add	r24, r28
 418:	9d 1f       	adc	r25, r29
 41a:	a8 0e       	add	r10, r24
 41c:	b9 1e       	adc	r11, r25
 41e:	f5 01       	movw	r30, r10
 420:	64 85       	ldd	r22, Z+12	; 0x0c
 422:	75 85       	ldd	r23, Z+13	; 0x0d
 424:	86 85       	ldd	r24, Z+14	; 0x0e
 426:	97 85       	ldd	r25, Z+15	; 0x0f
 428:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 42c:	f5 01       	movw	r30, r10
 42e:	64 87       	std	Z+12, r22	; 0x0c
 430:	75 87       	std	Z+13, r23	; 0x0d
 432:	86 87       	std	Z+14, r24	; 0x0e
 434:	97 87       	std	Z+15, r25	; 0x0f
					error = PID_foo(coef);
 436:	ce 01       	movw	r24, r28
 438:	0d 96       	adiw	r24, 0x0d	; 13
 43a:	0e 94 a1 00 	call	0x142	; 0x142 <PID_foo>
 43e:	b6 2e       	mov	r11, r22
 440:	a7 2e       	mov	r10, r23
 442:	98 2e       	mov	r9, r24
 444:	89 2e       	mov	r8, r25
					if(error < best_error)
 446:	26 2f       	mov	r18, r22
 448:	37 2f       	mov	r19, r23
 44a:	48 2f       	mov	r20, r24
 44c:	59 2f       	mov	r21, r25
 44e:	67 2d       	mov	r22, r7
 450:	76 2d       	mov	r23, r6
 452:	85 2d       	mov	r24, r5
 454:	94 2d       	mov	r25, r4
 456:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 45a:	18 16       	cp	r1, r24
 45c:	ec f4       	brge	.+58     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
					{
						best_error = error;
						dcoef[i] *= 1.05;
 45e:	38 01       	movw	r6, r16
 460:	66 0c       	add	r6, r6
 462:	77 1c       	adc	r7, r7
 464:	66 0c       	add	r6, r6
 466:	77 1c       	adc	r7, r7
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	8c 0f       	add	r24, r28
 46e:	9d 1f       	adc	r25, r29
 470:	68 0e       	add	r6, r24
 472:	79 1e       	adc	r7, r25
 474:	26 e6       	ldi	r18, 0x66	; 102
 476:	36 e6       	ldi	r19, 0x66	; 102
 478:	46 e8       	ldi	r20, 0x86	; 134
 47a:	5f e3       	ldi	r21, 0x3F	; 63
 47c:	c7 01       	movw	r24, r14
 47e:	b6 01       	movw	r22, r12
 480:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 484:	f3 01       	movw	r30, r6
 486:	60 83       	st	Z, r22
 488:	71 83       	std	Z+1, r23	; 0x01
 48a:	82 83       	std	Z+2, r24	; 0x02
 48c:	93 83       	std	Z+3, r25	; 0x03
				{
					coef[i] -= 0.1*dcoef[i];
					error = PID_foo(coef);
					if(error < best_error)
					{
						best_error = error;
 48e:	7b 2c       	mov	r7, r11
 490:	6a 2c       	mov	r6, r10
 492:	59 2c       	mov	r5, r9
 494:	48 2c       	mov	r4, r8
 496:	26 c0       	rjmp	.+76     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
						dcoef[i] *= 1.05;
					} 
					else
					{
						coef[i] += dcoef[i];
 498:	58 01       	movw	r10, r16
 49a:	aa 0c       	add	r10, r10
 49c:	bb 1c       	adc	r11, r11
 49e:	aa 0c       	add	r10, r10
 4a0:	bb 1c       	adc	r11, r11
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	8c 0f       	add	r24, r28
 4a8:	9d 1f       	adc	r25, r29
 4aa:	a8 0e       	add	r10, r24
 4ac:	b9 1e       	adc	r11, r25
 4ae:	a7 01       	movw	r20, r14
 4b0:	96 01       	movw	r18, r12
 4b2:	f5 01       	movw	r30, r10
 4b4:	64 85       	ldd	r22, Z+12	; 0x0c
 4b6:	75 85       	ldd	r23, Z+13	; 0x0d
 4b8:	86 85       	ldd	r24, Z+14	; 0x0e
 4ba:	97 85       	ldd	r25, Z+15	; 0x0f
 4bc:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 4c0:	f5 01       	movw	r30, r10
 4c2:	64 87       	std	Z+12, r22	; 0x0c
 4c4:	75 87       	std	Z+13, r23	; 0x0d
 4c6:	86 87       	std	Z+14, r24	; 0x0e
 4c8:	97 87       	std	Z+15, r25	; 0x0f
						dcoef[i] *= 0.95;
 4ca:	23 e3       	ldi	r18, 0x33	; 51
 4cc:	33 e3       	ldi	r19, 0x33	; 51
 4ce:	43 e7       	ldi	r20, 0x73	; 115
 4d0:	5f e3       	ldi	r21, 0x3F	; 63
 4d2:	c7 01       	movw	r24, r14
 4d4:	b6 01       	movw	r22, r12
 4d6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 4da:	f5 01       	movw	r30, r10
 4dc:	60 83       	st	Z, r22
 4de:	71 83       	std	Z+1, r23	; 0x01
 4e0:	82 83       	std	Z+2, r24	; 0x02
 4e2:	93 83       	std	Z+3, r25	; 0x03
		float error = 0;
		
		//while((dcoef[0] + dcoef[1] + dcoef[2]) > threshold)
		while(1)
		{
			for(int i =0; i < 3; i++)
 4e4:	0f 5f       	subi	r16, 0xFF	; 255
 4e6:	1f 4f       	sbci	r17, 0xFF	; 255
 4e8:	03 30       	cpi	r16, 0x03	; 3
 4ea:	11 05       	cpc	r17, r1
 4ec:	0c f4       	brge	.+2      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4ee:	34 cf       	rjmp	.-408    	; 0x358 <main+0x70>
						coef[i] += dcoef[i];
						dcoef[i] *= 0.95;
					}
				}
			}
				if((new_ADC_value >= (Set_Point + X)) && (new_ADC_value < 256))
 4f0:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <new_ADC_value>
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 4fe:	6b 01       	movw	r12, r22
 500:	7c 01       	movw	r14, r24
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	4e ef       	ldi	r20, 0xFE	; 254
 508:	52 e4       	ldi	r21, 0x42	; 66
 50a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <X>
 50e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <X+0x1>
 512:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <X+0x2>
 516:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <X+0x3>
 51a:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 51e:	9b 01       	movw	r18, r22
 520:	ac 01       	movw	r20, r24
 522:	c7 01       	movw	r24, r14
 524:	b6 01       	movw	r22, r12
 526:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 52a:	88 23       	and	r24, r24
 52c:	54 f0       	brlt	.+20     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
				{
					PORTD = PORTD & 0x207;
 52e:	8b b1       	in	r24, 0x0b	; 11
 530:	87 70       	andi	r24, 0x07	; 7
 532:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (0 << PIND4) | (1 << PIND5);
 534:	8b b1       	in	r24, 0x0b	; 11
 536:	80 62       	ori	r24, 0x20	; 32
 538:	8b b9       	out	0x0b, r24	; 11
					//pwmfunc(PWM_Temp - PID_foo(coef));
					pwmfunc(110);
 53a:	8e e6       	ldi	r24, 0x6E	; 110
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 80 00 	call	0x100	; 0x100 <pwmfunc>
					//pwmfunc(0.013*PID_foo(coef));
				}
				if((new_ADC_value < (Set_Point - X)) && (new_ADC_value >= 0))
 542:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <new_ADC_value>
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 550:	6b 01       	movw	r12, r22
 552:	7c 01       	movw	r14, r24
 554:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <X>
 558:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <X+0x1>
 55c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <X+0x2>
 560:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <X+0x3>
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	8e ef       	ldi	r24, 0xFE	; 254
 56a:	92 e4       	ldi	r25, 0x42	; 66
 56c:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
 574:	c7 01       	movw	r24, r14
 576:	b6 01       	movw	r22, r12
 578:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
 57c:	88 23       	and	r24, r24
 57e:	54 f4       	brge	.+20     	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
				{
					PORTD = PORTD & 0x207;
 580:	8b b1       	in	r24, 0x0b	; 11
 582:	87 70       	andi	r24, 0x07	; 7
 584:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (1 << PIND4) | (0 << PIND5);
 586:	8b b1       	in	r24, 0x0b	; 11
 588:	80 61       	ori	r24, 0x10	; 16
 58a:	8b b9       	out	0x0b, r24	; 11
					pwmfunc(110);
 58c:	8e e6       	ldi	r24, 0x6E	; 110
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 80 00 	call	0x100	; 0x100 <pwmfunc>
					//pwmfunc(0.5*PID_foo(coef));
				}
				if((new_ADC_value < (Set_Point + X)) && (new_ADC_value > (Set_Point + Y)))
 594:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <new_ADC_value>
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 5a2:	6b 01       	movw	r12, r22
 5a4:	7c 01       	movw	r14, r24
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	4e ef       	ldi	r20, 0xFE	; 254
 5ac:	52 e4       	ldi	r21, 0x42	; 66
 5ae:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <X>
 5b2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <X+0x1>
 5b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <X+0x2>
 5ba:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <X+0x3>
 5be:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	c7 01       	movw	r24, r14
 5c8:	b6 01       	movw	r22, r12
 5ca:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
 5ce:	88 23       	and	r24, r24
 5d0:	5c f5       	brge	.+86     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	4e ef       	ldi	r20, 0xFE	; 254
 5d8:	52 e4       	ldi	r21, 0x42	; 66
 5da:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Y>
 5de:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Y+0x1>
 5e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Y+0x2>
 5e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Y+0x3>
 5ea:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 5ee:	9b 01       	movw	r18, r22
 5f0:	ac 01       	movw	r20, r24
 5f2:	c7 01       	movw	r24, r14
 5f4:	b6 01       	movw	r22, r12
 5f6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 5fa:	18 16       	cp	r1, r24
 5fc:	ac f4       	brge	.+42     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
				{
					PORTD = PORTD & 0x207;
 5fe:	8b b1       	in	r24, 0x0b	; 11
 600:	87 70       	andi	r24, 0x07	; 7
 602:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (0 << PIND4) | (1 << PIND5);
 604:	8b b1       	in	r24, 0x0b	; 11
 606:	80 62       	ori	r24, 0x20	; 32
 608:	8b b9       	out	0x0b, r24	; 11
					pwmfunc(0.8*PID_foo(coef));//0.85
 60a:	ce 01       	movw	r24, r28
 60c:	0d 96       	adiw	r24, 0x0d	; 13
 60e:	0e 94 a1 00 	call	0x142	; 0x142 <PID_foo>
 612:	2d ec       	ldi	r18, 0xCD	; 205
 614:	3c ec       	ldi	r19, 0xCC	; 204
 616:	4c e4       	ldi	r20, 0x4C	; 76
 618:	5f e3       	ldi	r21, 0x3F	; 63
 61a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 61e:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
 622:	cb 01       	movw	r24, r22
 624:	0e 94 80 00 	call	0x100	; 0x100 <pwmfunc>
					
				}
				if((new_ADC_value > (Set_Point - X)) && (new_ADC_value < (Set_Point - Y)))
 628:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <new_ADC_value>
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 636:	6b 01       	movw	r12, r22
 638:	7c 01       	movw	r14, r24
 63a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <X>
 63e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <X+0x1>
 642:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <X+0x2>
 646:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <X+0x3>
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	8e ef       	ldi	r24, 0xFE	; 254
 650:	92 e4       	ldi	r25, 0x42	; 66
 652:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 656:	9b 01       	movw	r18, r22
 658:	ac 01       	movw	r20, r24
 65a:	c7 01       	movw	r24, r14
 65c:	b6 01       	movw	r22, r12
 65e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 662:	18 16       	cp	r1, r24
 664:	5c f5       	brge	.+86     	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
 666:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Y>
 66a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Y+0x1>
 66e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Y+0x2>
 672:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Y+0x3>
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	8e ef       	ldi	r24, 0xFE	; 254
 67c:	92 e4       	ldi	r25, 0x42	; 66
 67e:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 682:	9b 01       	movw	r18, r22
 684:	ac 01       	movw	r20, r24
 686:	c7 01       	movw	r24, r14
 688:	b6 01       	movw	r22, r12
 68a:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
 68e:	88 23       	and	r24, r24
 690:	ac f4       	brge	.+42     	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				{
					PORTD = PORTD & 0x207;
 692:	8b b1       	in	r24, 0x0b	; 11
 694:	87 70       	andi	r24, 0x07	; 7
 696:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (1 << PIND4) | (0 << PIND5);
 698:	8b b1       	in	r24, 0x0b	; 11
 69a:	80 61       	ori	r24, 0x10	; 16
 69c:	8b b9       	out	0x0b, r24	; 11
					//pwmfunc(15*PWM_Temp - 15*PID_foo(coef));
					pwmfunc(0.8*PID_foo(coef));//0.85
 69e:	ce 01       	movw	r24, r28
 6a0:	0d 96       	adiw	r24, 0x0d	; 13
 6a2:	0e 94 a1 00 	call	0x142	; 0x142 <PID_foo>
 6a6:	2d ec       	ldi	r18, 0xCD	; 205
 6a8:	3c ec       	ldi	r19, 0xCC	; 204
 6aa:	4c e4       	ldi	r20, 0x4C	; 76
 6ac:	5f e3       	ldi	r21, 0x3F	; 63
 6ae:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__mulsf3>
 6b2:	0e 94 0d 04 	call	0x81a	; 0x81a <__fixsfsi>
 6b6:	cb 01       	movw	r24, r22
 6b8:	0e 94 80 00 	call	0x100	; 0x100 <pwmfunc>
				}
				if ((new_ADC_value < (Set_Point + Z)) && (new_ADC_value > (Set_Point - Z)))
 6bc:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <new_ADC_value>
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
 6ca:	6b 01       	movw	r12, r22
 6cc:	7c 01       	movw	r14, r24
 6ce:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6d2:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6d6:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 6da:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 6de:	20 e0       	ldi	r18, 0x00	; 0
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	4e ef       	ldi	r20, 0xFE	; 254
 6e4:	52 e4       	ldi	r21, 0x42	; 66
 6e6:	c5 01       	movw	r24, r10
 6e8:	b4 01       	movw	r22, r8
 6ea:	0e 94 9c 03 	call	0x738	; 0x738 <__addsf3>
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	c7 01       	movw	r24, r14
 6f4:	b6 01       	movw	r22, r12
 6f6:	0e 94 08 04 	call	0x810	; 0x810 <__cmpsf2>
 6fa:	88 23       	and	r24, r24
 6fc:	0c f0       	brlt	.+2      	; 0x700 <__EEPROM_REGION_LENGTH__+0x300>
 6fe:	29 ce       	rjmp	.-942    	; 0x352 <main+0x6a>
 700:	a5 01       	movw	r20, r10
 702:	94 01       	movw	r18, r8
 704:	60 e0       	ldi	r22, 0x00	; 0
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	8e ef       	ldi	r24, 0xFE	; 254
 70a:	92 e4       	ldi	r25, 0x42	; 66
 70c:	0e 94 9b 03 	call	0x736	; 0x736 <__subsf3>
 710:	9b 01       	movw	r18, r22
 712:	ac 01       	movw	r20, r24
 714:	c7 01       	movw	r24, r14
 716:	b6 01       	movw	r22, r12
 718:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__gesf2>
 71c:	18 16       	cp	r1, r24
 71e:	0c f0       	brlt	.+2      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 720:	18 ce       	rjmp	.-976    	; 0x352 <main+0x6a>
				{
					PORTD = PORTD & 0x207;
 722:	8b b1       	in	r24, 0x0b	; 11
 724:	87 70       	andi	r24, 0x07	; 7
 726:	8b b9       	out	0x0b, r24	; 11
					PORTD |= (0 << PIND4) | (0 << PIND5);
 728:	8b b1       	in	r24, 0x0b	; 11
 72a:	8b b9       	out	0x0b, r24	; 11
					pwmfunc(0);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 80 00 	call	0x100	; 0x100 <pwmfunc>
 734:	0e ce       	rjmp	.-996    	; 0x352 <main+0x6a>

00000736 <__subsf3>:
 736:	50 58       	subi	r21, 0x80	; 128

00000738 <__addsf3>:
 738:	bb 27       	eor	r27, r27
 73a:	aa 27       	eor	r26, r26
 73c:	0e 94 b3 03 	call	0x766	; 0x766 <__addsf3x>
 740:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_round>
 744:	0e 94 ad 04 	call	0x95a	; 0x95a <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__addsf3+0x20>
 74a:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__addsf3+0x20>
 750:	39 f4       	brne	.+14     	; 0x760 <__addsf3+0x28>
 752:	9f 3f       	cpi	r25, 0xFF	; 255
 754:	19 f4       	brne	.+6      	; 0x75c <__addsf3+0x24>
 756:	26 f4       	brtc	.+8      	; 0x760 <__addsf3+0x28>
 758:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_nan>
 75c:	0e f4       	brtc	.+2      	; 0x760 <__addsf3+0x28>
 75e:	e0 95       	com	r30
 760:	e7 fb       	bst	r30, 7
 762:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_inf>

00000766 <__addsf3x>:
 766:	e9 2f       	mov	r30, r25
 768:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_split3>
 76c:	58 f3       	brcs	.-42     	; 0x744 <__addsf3+0xc>
 76e:	ba 17       	cp	r27, r26
 770:	62 07       	cpc	r22, r18
 772:	73 07       	cpc	r23, r19
 774:	84 07       	cpc	r24, r20
 776:	95 07       	cpc	r25, r21
 778:	20 f0       	brcs	.+8      	; 0x782 <__addsf3x+0x1c>
 77a:	79 f4       	brne	.+30     	; 0x79a <__addsf3x+0x34>
 77c:	a6 f5       	brtc	.+104    	; 0x7e6 <__addsf3x+0x80>
 77e:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_zero>
 782:	0e f4       	brtc	.+2      	; 0x786 <__addsf3x+0x20>
 784:	e0 95       	com	r30
 786:	0b 2e       	mov	r0, r27
 788:	ba 2f       	mov	r27, r26
 78a:	a0 2d       	mov	r26, r0
 78c:	0b 01       	movw	r0, r22
 78e:	b9 01       	movw	r22, r18
 790:	90 01       	movw	r18, r0
 792:	0c 01       	movw	r0, r24
 794:	ca 01       	movw	r24, r20
 796:	a0 01       	movw	r20, r0
 798:	11 24       	eor	r1, r1
 79a:	ff 27       	eor	r31, r31
 79c:	59 1b       	sub	r21, r25
 79e:	99 f0       	breq	.+38     	; 0x7c6 <__addsf3x+0x60>
 7a0:	59 3f       	cpi	r21, 0xF9	; 249
 7a2:	50 f4       	brcc	.+20     	; 0x7b8 <__addsf3x+0x52>
 7a4:	50 3e       	cpi	r21, 0xE0	; 224
 7a6:	68 f1       	brcs	.+90     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7a8:	1a 16       	cp	r1, r26
 7aa:	f0 40       	sbci	r31, 0x00	; 0
 7ac:	a2 2f       	mov	r26, r18
 7ae:	23 2f       	mov	r18, r19
 7b0:	34 2f       	mov	r19, r20
 7b2:	44 27       	eor	r20, r20
 7b4:	58 5f       	subi	r21, 0xF8	; 248
 7b6:	f3 cf       	rjmp	.-26     	; 0x79e <__addsf3x+0x38>
 7b8:	46 95       	lsr	r20
 7ba:	37 95       	ror	r19
 7bc:	27 95       	ror	r18
 7be:	a7 95       	ror	r26
 7c0:	f0 40       	sbci	r31, 0x00	; 0
 7c2:	53 95       	inc	r21
 7c4:	c9 f7       	brne	.-14     	; 0x7b8 <__addsf3x+0x52>
 7c6:	7e f4       	brtc	.+30     	; 0x7e6 <__addsf3x+0x80>
 7c8:	1f 16       	cp	r1, r31
 7ca:	ba 0b       	sbc	r27, r26
 7cc:	62 0b       	sbc	r22, r18
 7ce:	73 0b       	sbc	r23, r19
 7d0:	84 0b       	sbc	r24, r20
 7d2:	ba f0       	brmi	.+46     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d4:	91 50       	subi	r25, 0x01	; 1
 7d6:	a1 f0       	breq	.+40     	; 0x800 <__DATA_REGION_LENGTH__>
 7d8:	ff 0f       	add	r31, r31
 7da:	bb 1f       	adc	r27, r27
 7dc:	66 1f       	adc	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	c2 f7       	brpl	.-16     	; 0x7d4 <__addsf3x+0x6e>
 7e4:	0e c0       	rjmp	.+28     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e6:	ba 0f       	add	r27, r26
 7e8:	62 1f       	adc	r22, r18
 7ea:	73 1f       	adc	r23, r19
 7ec:	84 1f       	adc	r24, r20
 7ee:	48 f4       	brcc	.+18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f0:	87 95       	ror	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b7 95       	ror	r27
 7f8:	f7 95       	ror	r31
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	08 f0       	brcs	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
 7fe:	b0 cf       	rjmp	.-160    	; 0x760 <__addsf3+0x28>
 800:	93 95       	inc	r25
 802:	88 0f       	add	r24, r24
 804:	08 f0       	brcs	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	99 27       	eor	r25, r25
 808:	ee 0f       	add	r30, r30
 80a:	97 95       	ror	r25
 80c:	87 95       	ror	r24
 80e:	08 95       	ret

00000810 <__cmpsf2>:
 810:	0e 94 80 04 	call	0x900	; 0x900 <__fp_cmp>
 814:	08 f4       	brcc	.+2      	; 0x818 <__cmpsf2+0x8>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	08 95       	ret

0000081a <__fixsfsi>:
 81a:	0e 94 14 04 	call	0x828	; 0x828 <__fixunssfsi>
 81e:	68 94       	set
 820:	b1 11       	cpse	r27, r1
 822:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_szero>
 826:	08 95       	ret

00000828 <__fixunssfsi>:
 828:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__fp_splitA>
 82c:	88 f0       	brcs	.+34     	; 0x850 <__fixunssfsi+0x28>
 82e:	9f 57       	subi	r25, 0x7F	; 127
 830:	98 f0       	brcs	.+38     	; 0x858 <__fixunssfsi+0x30>
 832:	b9 2f       	mov	r27, r25
 834:	99 27       	eor	r25, r25
 836:	b7 51       	subi	r27, 0x17	; 23
 838:	b0 f0       	brcs	.+44     	; 0x866 <__fixunssfsi+0x3e>
 83a:	e1 f0       	breq	.+56     	; 0x874 <__fixunssfsi+0x4c>
 83c:	66 0f       	add	r22, r22
 83e:	77 1f       	adc	r23, r23
 840:	88 1f       	adc	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	1a f0       	brmi	.+6      	; 0x84c <__fixunssfsi+0x24>
 846:	ba 95       	dec	r27
 848:	c9 f7       	brne	.-14     	; 0x83c <__fixunssfsi+0x14>
 84a:	14 c0       	rjmp	.+40     	; 0x874 <__fixunssfsi+0x4c>
 84c:	b1 30       	cpi	r27, 0x01	; 1
 84e:	91 f0       	breq	.+36     	; 0x874 <__fixunssfsi+0x4c>
 850:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_zero>
 854:	b1 e0       	ldi	r27, 0x01	; 1
 856:	08 95       	ret
 858:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_zero>
 85c:	67 2f       	mov	r22, r23
 85e:	78 2f       	mov	r23, r24
 860:	88 27       	eor	r24, r24
 862:	b8 5f       	subi	r27, 0xF8	; 248
 864:	39 f0       	breq	.+14     	; 0x874 <__fixunssfsi+0x4c>
 866:	b9 3f       	cpi	r27, 0xF9	; 249
 868:	cc f3       	brlt	.-14     	; 0x85c <__fixunssfsi+0x34>
 86a:	86 95       	lsr	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	b3 95       	inc	r27
 872:	d9 f7       	brne	.-10     	; 0x86a <__fixunssfsi+0x42>
 874:	3e f4       	brtc	.+14     	; 0x884 <__fixunssfsi+0x5c>
 876:	90 95       	com	r25
 878:	80 95       	com	r24
 87a:	70 95       	com	r23
 87c:	61 95       	neg	r22
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	08 95       	ret

00000886 <__floatunsisf>:
 886:	e8 94       	clt
 888:	09 c0       	rjmp	.+18     	; 0x89c <__floatsisf+0x12>

0000088a <__floatsisf>:
 88a:	97 fb       	bst	r25, 7
 88c:	3e f4       	brtc	.+14     	; 0x89c <__floatsisf+0x12>
 88e:	90 95       	com	r25
 890:	80 95       	com	r24
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255
 898:	8f 4f       	sbci	r24, 0xFF	; 255
 89a:	9f 4f       	sbci	r25, 0xFF	; 255
 89c:	99 23       	and	r25, r25
 89e:	a9 f0       	breq	.+42     	; 0x8ca <__floatsisf+0x40>
 8a0:	f9 2f       	mov	r31, r25
 8a2:	96 e9       	ldi	r25, 0x96	; 150
 8a4:	bb 27       	eor	r27, r27
 8a6:	93 95       	inc	r25
 8a8:	f6 95       	lsr	r31
 8aa:	87 95       	ror	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f1 11       	cpse	r31, r1
 8b4:	f8 cf       	rjmp	.-16     	; 0x8a6 <__floatsisf+0x1c>
 8b6:	fa f4       	brpl	.+62     	; 0x8f6 <__floatsisf+0x6c>
 8b8:	bb 0f       	add	r27, r27
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__floatsisf+0x36>
 8bc:	60 ff       	sbrs	r22, 0
 8be:	1b c0       	rjmp	.+54     	; 0x8f6 <__floatsisf+0x6c>
 8c0:	6f 5f       	subi	r22, 0xFF	; 255
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <__floatsisf+0x6c>
 8ca:	88 23       	and	r24, r24
 8cc:	11 f0       	breq	.+4      	; 0x8d2 <__floatsisf+0x48>
 8ce:	96 e9       	ldi	r25, 0x96	; 150
 8d0:	11 c0       	rjmp	.+34     	; 0x8f4 <__floatsisf+0x6a>
 8d2:	77 23       	and	r23, r23
 8d4:	21 f0       	breq	.+8      	; 0x8de <__floatsisf+0x54>
 8d6:	9e e8       	ldi	r25, 0x8E	; 142
 8d8:	87 2f       	mov	r24, r23
 8da:	76 2f       	mov	r23, r22
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <__floatsisf+0x5e>
 8de:	66 23       	and	r22, r22
 8e0:	71 f0       	breq	.+28     	; 0x8fe <__floatsisf+0x74>
 8e2:	96 e8       	ldi	r25, 0x86	; 134
 8e4:	86 2f       	mov	r24, r22
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	2a f0       	brmi	.+10     	; 0x8f6 <__floatsisf+0x6c>
 8ec:	9a 95       	dec	r25
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	da f7       	brpl	.-10     	; 0x8ec <__floatsisf+0x62>
 8f6:	88 0f       	add	r24, r24
 8f8:	96 95       	lsr	r25
 8fa:	87 95       	ror	r24
 8fc:	97 f9       	bld	r25, 7
 8fe:	08 95       	ret

00000900 <__fp_cmp>:
 900:	99 0f       	add	r25, r25
 902:	00 08       	sbc	r0, r0
 904:	55 0f       	add	r21, r21
 906:	aa 0b       	sbc	r26, r26
 908:	e0 e8       	ldi	r30, 0x80	; 128
 90a:	fe ef       	ldi	r31, 0xFE	; 254
 90c:	16 16       	cp	r1, r22
 90e:	17 06       	cpc	r1, r23
 910:	e8 07       	cpc	r30, r24
 912:	f9 07       	cpc	r31, r25
 914:	c0 f0       	brcs	.+48     	; 0x946 <__fp_cmp+0x46>
 916:	12 16       	cp	r1, r18
 918:	13 06       	cpc	r1, r19
 91a:	e4 07       	cpc	r30, r20
 91c:	f5 07       	cpc	r31, r21
 91e:	98 f0       	brcs	.+38     	; 0x946 <__fp_cmp+0x46>
 920:	62 1b       	sub	r22, r18
 922:	73 0b       	sbc	r23, r19
 924:	84 0b       	sbc	r24, r20
 926:	95 0b       	sbc	r25, r21
 928:	39 f4       	brne	.+14     	; 0x938 <__fp_cmp+0x38>
 92a:	0a 26       	eor	r0, r26
 92c:	61 f0       	breq	.+24     	; 0x946 <__fp_cmp+0x46>
 92e:	23 2b       	or	r18, r19
 930:	24 2b       	or	r18, r20
 932:	25 2b       	or	r18, r21
 934:	21 f4       	brne	.+8      	; 0x93e <__fp_cmp+0x3e>
 936:	08 95       	ret
 938:	0a 26       	eor	r0, r26
 93a:	09 f4       	brne	.+2      	; 0x93e <__fp_cmp+0x3e>
 93c:	a1 40       	sbci	r26, 0x01	; 1
 93e:	a6 95       	lsr	r26
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	81 1d       	adc	r24, r1
 944:	81 1d       	adc	r24, r1
 946:	08 95       	ret

00000948 <__fp_inf>:
 948:	97 f9       	bld	r25, 7
 94a:	9f 67       	ori	r25, 0x7F	; 127
 94c:	80 e8       	ldi	r24, 0x80	; 128
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	08 95       	ret

00000954 <__fp_nan>:
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	80 ec       	ldi	r24, 0xC0	; 192
 958:	08 95       	ret

0000095a <__fp_pscA>:
 95a:	00 24       	eor	r0, r0
 95c:	0a 94       	dec	r0
 95e:	16 16       	cp	r1, r22
 960:	17 06       	cpc	r1, r23
 962:	18 06       	cpc	r1, r24
 964:	09 06       	cpc	r0, r25
 966:	08 95       	ret

00000968 <__fp_pscB>:
 968:	00 24       	eor	r0, r0
 96a:	0a 94       	dec	r0
 96c:	12 16       	cp	r1, r18
 96e:	13 06       	cpc	r1, r19
 970:	14 06       	cpc	r1, r20
 972:	05 06       	cpc	r0, r21
 974:	08 95       	ret

00000976 <__fp_round>:
 976:	09 2e       	mov	r0, r25
 978:	03 94       	inc	r0
 97a:	00 0c       	add	r0, r0
 97c:	11 f4       	brne	.+4      	; 0x982 <__fp_round+0xc>
 97e:	88 23       	and	r24, r24
 980:	52 f0       	brmi	.+20     	; 0x996 <__fp_round+0x20>
 982:	bb 0f       	add	r27, r27
 984:	40 f4       	brcc	.+16     	; 0x996 <__fp_round+0x20>
 986:	bf 2b       	or	r27, r31
 988:	11 f4       	brne	.+4      	; 0x98e <__fp_round+0x18>
 98a:	60 ff       	sbrs	r22, 0
 98c:	04 c0       	rjmp	.+8      	; 0x996 <__fp_round+0x20>
 98e:	6f 5f       	subi	r22, 0xFF	; 255
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	08 95       	ret

00000998 <__fp_split3>:
 998:	57 fd       	sbrc	r21, 7
 99a:	90 58       	subi	r25, 0x80	; 128
 99c:	44 0f       	add	r20, r20
 99e:	55 1f       	adc	r21, r21
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <__fp_splitA+0x10>
 9a2:	5f 3f       	cpi	r21, 0xFF	; 255
 9a4:	71 f0       	breq	.+28     	; 0x9c2 <__fp_splitA+0x1a>
 9a6:	47 95       	ror	r20

000009a8 <__fp_splitA>:
 9a8:	88 0f       	add	r24, r24
 9aa:	97 fb       	bst	r25, 7
 9ac:	99 1f       	adc	r25, r25
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <__fp_splitA+0x20>
 9b0:	9f 3f       	cpi	r25, 0xFF	; 255
 9b2:	79 f0       	breq	.+30     	; 0x9d2 <__fp_splitA+0x2a>
 9b4:	87 95       	ror	r24
 9b6:	08 95       	ret
 9b8:	12 16       	cp	r1, r18
 9ba:	13 06       	cpc	r1, r19
 9bc:	14 06       	cpc	r1, r20
 9be:	55 1f       	adc	r21, r21
 9c0:	f2 cf       	rjmp	.-28     	; 0x9a6 <__fp_split3+0xe>
 9c2:	46 95       	lsr	r20
 9c4:	f1 df       	rcall	.-30     	; 0x9a8 <__fp_splitA>
 9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <__fp_splitA+0x30>
 9c8:	16 16       	cp	r1, r22
 9ca:	17 06       	cpc	r1, r23
 9cc:	18 06       	cpc	r1, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	f1 cf       	rjmp	.-30     	; 0x9b4 <__fp_splitA+0xc>
 9d2:	86 95       	lsr	r24
 9d4:	71 05       	cpc	r23, r1
 9d6:	61 05       	cpc	r22, r1
 9d8:	08 94       	sec
 9da:	08 95       	ret

000009dc <__fp_zero>:
 9dc:	e8 94       	clt

000009de <__fp_szero>:
 9de:	bb 27       	eor	r27, r27
 9e0:	66 27       	eor	r22, r22
 9e2:	77 27       	eor	r23, r23
 9e4:	cb 01       	movw	r24, r22
 9e6:	97 f9       	bld	r25, 7
 9e8:	08 95       	ret

000009ea <__gesf2>:
 9ea:	0e 94 80 04 	call	0x900	; 0x900 <__fp_cmp>
 9ee:	08 f4       	brcc	.+2      	; 0x9f2 <__gesf2+0x8>
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	08 95       	ret

000009f4 <__mulsf3>:
 9f4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__mulsf3x>
 9f8:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_round>
 9fc:	0e 94 ad 04 	call	0x95a	; 0x95a <__fp_pscA>
 a00:	38 f0       	brcs	.+14     	; 0xa10 <__mulsf3+0x1c>
 a02:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_pscB>
 a06:	20 f0       	brcs	.+8      	; 0xa10 <__mulsf3+0x1c>
 a08:	95 23       	and	r25, r21
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__mulsf3+0x1c>
 a0c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_inf>
 a10:	0c 94 aa 04 	jmp	0x954	; 0x954 <__fp_nan>
 a14:	11 24       	eor	r1, r1
 a16:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_szero>

00000a1a <__mulsf3x>:
 a1a:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_split3>
 a1e:	70 f3       	brcs	.-36     	; 0x9fc <__mulsf3+0x8>

00000a20 <__mulsf3_pse>:
 a20:	95 9f       	mul	r25, r21
 a22:	c1 f3       	breq	.-16     	; 0xa14 <__mulsf3+0x20>
 a24:	95 0f       	add	r25, r21
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	55 1f       	adc	r21, r21
 a2a:	62 9f       	mul	r22, r18
 a2c:	f0 01       	movw	r30, r0
 a2e:	72 9f       	mul	r23, r18
 a30:	bb 27       	eor	r27, r27
 a32:	f0 0d       	add	r31, r0
 a34:	b1 1d       	adc	r27, r1
 a36:	63 9f       	mul	r22, r19
 a38:	aa 27       	eor	r26, r26
 a3a:	f0 0d       	add	r31, r0
 a3c:	b1 1d       	adc	r27, r1
 a3e:	aa 1f       	adc	r26, r26
 a40:	64 9f       	mul	r22, r20
 a42:	66 27       	eor	r22, r22
 a44:	b0 0d       	add	r27, r0
 a46:	a1 1d       	adc	r26, r1
 a48:	66 1f       	adc	r22, r22
 a4a:	82 9f       	mul	r24, r18
 a4c:	22 27       	eor	r18, r18
 a4e:	b0 0d       	add	r27, r0
 a50:	a1 1d       	adc	r26, r1
 a52:	62 1f       	adc	r22, r18
 a54:	73 9f       	mul	r23, r19
 a56:	b0 0d       	add	r27, r0
 a58:	a1 1d       	adc	r26, r1
 a5a:	62 1f       	adc	r22, r18
 a5c:	83 9f       	mul	r24, r19
 a5e:	a0 0d       	add	r26, r0
 a60:	61 1d       	adc	r22, r1
 a62:	22 1f       	adc	r18, r18
 a64:	74 9f       	mul	r23, r20
 a66:	33 27       	eor	r19, r19
 a68:	a0 0d       	add	r26, r0
 a6a:	61 1d       	adc	r22, r1
 a6c:	23 1f       	adc	r18, r19
 a6e:	84 9f       	mul	r24, r20
 a70:	60 0d       	add	r22, r0
 a72:	21 1d       	adc	r18, r1
 a74:	82 2f       	mov	r24, r18
 a76:	76 2f       	mov	r23, r22
 a78:	6a 2f       	mov	r22, r26
 a7a:	11 24       	eor	r1, r1
 a7c:	9f 57       	subi	r25, 0x7F	; 127
 a7e:	50 40       	sbci	r21, 0x00	; 0
 a80:	9a f0       	brmi	.+38     	; 0xaa8 <__mulsf3_pse+0x88>
 a82:	f1 f0       	breq	.+60     	; 0xac0 <__mulsf3_pse+0xa0>
 a84:	88 23       	and	r24, r24
 a86:	4a f0       	brmi	.+18     	; 0xa9a <__mulsf3_pse+0x7a>
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	bb 1f       	adc	r27, r27
 a8e:	66 1f       	adc	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__mulsf3_pse+0x64>
 a9a:	9e 3f       	cpi	r25, 0xFE	; 254
 a9c:	51 05       	cpc	r21, r1
 a9e:	80 f0       	brcs	.+32     	; 0xac0 <__mulsf3_pse+0xa0>
 aa0:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_inf>
 aa4:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_szero>
 aa8:	5f 3f       	cpi	r21, 0xFF	; 255
 aaa:	e4 f3       	brlt	.-8      	; 0xaa4 <__mulsf3_pse+0x84>
 aac:	98 3e       	cpi	r25, 0xE8	; 232
 aae:	d4 f3       	brlt	.-12     	; 0xaa4 <__mulsf3_pse+0x84>
 ab0:	86 95       	lsr	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f7 95       	ror	r31
 aba:	e7 95       	ror	r30
 abc:	9f 5f       	subi	r25, 0xFF	; 255
 abe:	c1 f7       	brne	.-16     	; 0xab0 <__mulsf3_pse+0x90>
 ac0:	fe 2b       	or	r31, r30
 ac2:	88 0f       	add	r24, r24
 ac4:	91 1d       	adc	r25, r1
 ac6:	96 95       	lsr	r25
 ac8:	87 95       	ror	r24
 aca:	97 f9       	bld	r25, 7
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
